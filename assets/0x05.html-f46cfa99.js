import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as e,a as l,d as s,e as n,f as a}from"./app-e7fce849.js";const o={},i=s("p",null,"程序设计中，排序算法通常有三类：比较排序、非比较排序和混合排序。",-1),c=s("ul",null,[s("li",null,[n("比较排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n\\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[n("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n("，因此也称为非线性时间比较类排序。")]),s("li",null,"非比较排序：不通过比较来决定元素间的相对次序，它可以突破比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。"),s("li",null,"混合排序：通过比较和非比较两种方法来进行排序，其时间复杂度介于上述两种之间，因此也称为线性对数比较类排序。")],-1),r=s("p",null,"比较排序：通过比较元素之间的大小关系，逐一比较和交换元素的位置，使得排序后的元素满足总体有序的性质。常见的比较排序算法有冒泡排序、插入排序、选择排序、快速排序、归并排序、堆排序等。其中，快速排序、归并排序、堆排序都具有O(nlogn)的时间复杂度（最坏情况下）。",-1),u=s("p",null,"非比较排序：通过某种特殊的技术（如桶排序、计数排序、基数排序）来实现排序，不基于比较元素之间大小的关系。在一定的条件下，非比较排序算法的时间复杂度可以达到O(n)的线性复杂度。例如，计数排序和基数排序适用于排序值在一定范围内的整数序列，时间复杂度均为O(n+k)，其中k为正整数。",-1),m=s("p",null,"混合排序：结合两种或多种不同的排序算法，根据不同的数据属性和大小来选择更适合的排序算法。例如，C++标准库的sort函数就是一种经典的混合排序算法，它包括快速排序、插入排序、堆排序三种排序算法，会根据数据的大小和类型自适应地选择排序算法。",-1),d=s("p",null,"排序算法的选择取决于任务的特征和时间/空间的限制，不同的排序.",-1),k=s("h2",{id:"离散化",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#离散化","aria-hidden":"true"},"#"),n(" 离散化")],-1),h=s("p",null,"离散化可以映射无穷大集合中的若干个元素到有限集合以便于统计。",-1),g=s("p",null,"例如，问题的范围虽然定义在整数集合，但只涉及其中m个有限值，并且与数值的绝对大小无关。此时可以将整数集合中的m个整数与1~m建立映射关系。如果有一个时间、空间复杂度与数值范围大小有关的算法，在离散化后的复杂度均将降低为与m有关。",-1),b=s("p",null,[n("具体的说，假设问题涉及的数值范围为int的n个整数，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n("为数值个数，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"m")])])]),n("为离散化后的数值个数，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"a"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"a_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n("为原始数值，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"b"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"b_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n("为离散化后的数值。")],-1),v=s("p",null,"可以将a数组排序去重后，得到有序数组b，在数组b的下标i与数值b[i]之间建立映射关系。若要查询整数i代替的数值，只需要返回 b[i]，若要查询整数a[j]被哪一个1~m的整数代替，只需要返在b中二分查找a[j]的位置。",-1),y=s("h3",{id:"例题-acwing-103-电影",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#例题-acwing-103-电影","aria-hidden":"true"},"#"),n(" 例题 AcWing 103 电影")],-1),w=s("h4",{id:"description",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#description","aria-hidden":"true"},"#"),n(" Description")],-1),x=s("p",null,[n("莫斯科正在举办一个大型国际会议，有 n 个来自不同国家的科学家参会。"),s("br"),n(" 每个科学家都只懂得一种语言。"),s("br"),n(" 为了方便起见，我们把世界上的所有语言用 1 到 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"9")])]),s("annotation",{encoding:"application/x-tex"},"10^9")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"9")])])])])])])])])])]),n(" 之间的整数编号。"),s("br"),n(" 在会议结束后，所有的科学家决定一起去看场电影放松一下。"),s("br"),n(" 他们去的电影院里一共有 m 部电影正在上映，每部电影的语音和字幕都采用不同的语言。"),s("br"),n(" 对于观影的科学家来说，如果能听懂电影的语音，他就会很开心；如果能看懂字幕，他就会比较开心；如果全都不懂，他就会不开心。"),s("br"),n(" 现在科学家们决定大家看同一场电影。"),s("br"),n(" 请你帮忙选择一部电影，可以让观影很开心的人最多。"),s("br"),n(" 如果有多部电影满足条件，则在这些电影中挑选观影比较开心的人最多的那一部。")],-1),_=a('<h4 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h4><p>第一行输入一个整数 n，代表科学家的数量。</p><p>第二行输入 n 个整数 a1,a2…an，其中 ai 表示第 i 个科学家懂得的语言的编号。</p><p>第三行输入一个整数 m，代表电影的数量。</p><p>第四行输入 m 个整数 b1,b2…bm，其中 bi 表示第 i 部电影的语音采用的语言的编号。</p><p>第五行输入 m 个整数 c1,c2…cm，其中 ci 表示第 i 部电影的字幕采用的语言的编号。</p><p>请注意对于同一部电影来说，bi≠ci。</p><p>同一行内数字用空格隔开。</p><h4 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h4><p>输出一个整数，代表最终选择的电影的编号。电影编号 1∼m。</p><p>如果答案不唯一，输出任意一个均可。</p><h4 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> Range</h4>',12),f=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"≤"),s("mi",null,"n"),s("mo",{separator:"true"},","),s("mi",null,"m"),s("mo",null,"≤"),s("mn",null,"200000"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",null,"≤"),s("mi",null,"a"),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"b"),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"c"),s("mi",null,"i"),s("mo",null,"≤"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"9")])]),s("annotation",{encoding:"application/x-tex"},"1≤n,m≤200000,1≤ai,bi,ci≤10^9")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8304em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"200000"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"ai"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"bi"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"9")])])])])])])])])])])],-1),M=a('<h4 id="sample-input" tabindex="-1"><a class="header-anchor" href="#sample-input" aria-hidden="true">#</a> Sample Input</h4><p>3<br> 2 3 2<br> 2<br> 3 2<br> 2 3</p><h4 id="sample-output" tabindex="-1"><a class="header-anchor" href="#sample-output" aria-hidden="true">#</a> Sample Output</h4><p>2</p><h2 id="中位数" tabindex="-1"><a class="header-anchor" href="#中位数" aria-hidden="true">#</a> 中位数</h2><p>中位数是指将一组数据按照从小到大的顺序排列，位于中间位置的数。如果数据的个数是奇数，则中位数是最中间的那个数；如果数据的个数是偶数，则中位数是中间两个数的平均数。当结果与绝对位置无关，但与相对位置有关时，可以使用中位数来代替绝对位置。</p><h3 id="例题-acwing-104-货舱选址" tabindex="-1"><a class="header-anchor" href="#例题-acwing-104-货舱选址" aria-hidden="true">#</a> 例题 AcWing 104 货舱选址</h3><p>在一条数轴上有 N 家商店，它们的坐标分别为 A1∼AN。<br> 现在需要在数轴上建立一家货仓，每天清晨，从货仓到每家商店都要运送一车商品。<br> 为了提高效率，求把货仓建在何处，可以使得货仓到每家商店的距离之和最小。</p><h4 id="input-1" tabindex="-1"><a class="header-anchor" href="#input-1" aria-hidden="true">#</a> Input</h4><p>第一行输入整数 N。<br> 第二行 N 个整数 A1∼AN。</p><h4 id="output-1" tabindex="-1"><a class="header-anchor" href="#output-1" aria-hidden="true">#</a> Output</h4><p>输出一个整数，表示距离之和的最小值。</p><h4 id="range-1" tabindex="-1"><a class="header-anchor" href="#range-1" aria-hidden="true">#</a> Range</h4>',13),j=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"≤"),s("mi",null,"N"),s("mo",null,"≤"),s("mn",null,"100000"),s("mo",{separator:"true"},","),s("mn",null,"0"),s("mo",null,"≤"),s("mi",null,"A"),s("mi",null,"i"),s("mo",null,"≤"),s("mn",null,"40000")]),s("annotation",{encoding:"application/x-tex"},"1≤N≤100000,0≤Ai≤40000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8193em","vertical-align":"-0.136em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"100000"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8193em","vertical-align":"-0.136em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"40000")])])])],-1),O=a(`<h4 id="sample-input-1" tabindex="-1"><a class="header-anchor" href="#sample-input-1" aria-hidden="true">#</a> Sample Input</h4><p>4<br> 6 2 9 1</p><h4 id="sample-output-1" tabindex="-1"><a class="header-anchor" href="#sample-output-1" aria-hidden="true">#</a> Sample Output</h4><p>12</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ans <span class="token operator">=</span> <span class="token number">0</span>
nums <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
idx <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
    ans <span class="token operator">+=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num <span class="token operator">-</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第k大数" tabindex="-1"><a class="header-anchor" href="#第k大数" aria-hidden="true">#</a> 第K大数</h2>`,6),q=s("p",null,[n("利用快速排序将数组分为左右半段，设置一个基准，大于基准的值设置为cnt，如果k<=cnt，在左半段寻找第第k大数，如果k> cnt，则在右半段寻找第k-cnt大数。并且不断递归。复杂度可以从快速排序的 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n\\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[n("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(" 趋近于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(" 。")],-1),L=s("h2",{id:"逆序对",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#逆序对","aria-hidden":"true"},"#"),n(" 逆序对")],-1),A=s("p",null,"对于一个序列a，若i< j且a[i]>a[j]，则称a[i]、a[j]构成逆序对。",-1),z=s("p",null,[n("使用归并排序可以在"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n\\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[n("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n("内求出一个长度为n的序列中逆序对的个数。归并排序每次将序列二分，递归对左右两半排序，然后合并序列。")],-1),N=a('<p>具体的思路是，在归并排序的过程中，在合并两个有序子序列时，需要统计此时的逆序对数。假设已经将a[left, mid]和a[mid+1, right]两个有序子序列合并成a[left, right]，那么当前的逆序对数就是左半边有逆序对加右半边有逆序对再加上左右两个子序列之间的逆序对数。这可以通过“分治+归并”地思想来解决。</p><h3 id="例题-acwing-107-超快速排序" tabindex="-1"><a class="header-anchor" href="#例题-acwing-107-超快速排序" aria-hidden="true">#</a> 例题 AcWing 107 超快速排序</h3><p>在这个问题中，您必须分析特定的排序算法----超快速排序。</p><p>该算法通过交换两个相邻的序列元素来处理 n 个不同整数的序列，直到序列按升序排序。<br> 对于输入序列 9 1 0 5 4，超快速排序生成输出 0 1 4 5 9。</p><p>您的任务是确定超快速排序需要执行多少交换操作才能对给定的输入序列进行排序。</p><h4 id="input-2" tabindex="-1"><a class="header-anchor" href="#input-2" aria-hidden="true">#</a> Input</h4><p>输入包括一些测试用例。<br> 每个测试用例的第一行输入整数 n，代表该用例中输入序列的长度。</p><p>接下来 n 行每行输入一个整数 ai,代表用例中输入序列的具体数据，第 i 行的数据代表序列中第 i 个数。</p><p>当输入用例中包含的输入序列长度为 0 时，输入终止，该序列无需处理。</p><h4 id="output-2" tabindex="-1"><a class="header-anchor" href="#output-2" aria-hidden="true">#</a> Output</h4><p>对于每个需要处理的输入序列，输出一个整数 op，代表对给定输入序列进行排序所需的最小交换操作数，每个整数占一行。</p><h4 id="range-2" tabindex="-1"><a class="header-anchor" href="#range-2" aria-hidden="true">#</a> Range</h4>',12),S=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",null,"≤"),s("mi",null,"n"),s("mo",null,"<"),s("mn",null,"500000")]),s("annotation",{encoding:"application/x-tex"},"0≤n<500000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"500000")])])]),n(",一个测试点中，所有 n 的和不超过 500000。"),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",null,"≤"),s("mi",null,"a"),s("mi",null,"i"),s("mo",null,"≤"),s("mn",null,"999999999")]),s("annotation",{encoding:"application/x-tex"},"0≤ai≤999999999")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7955em","vertical-align":"-0.136em"}}),s("span",{class:"mord mathnormal"},"ai"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"999999999")])])])],-1),C=a(`<h4 id="sample-input-2" tabindex="-1"><a class="header-anchor" href="#sample-input-2" aria-hidden="true">#</a> Sample Input</h4><p>5<br> 9<br> 1<br> 0<br> 5<br> 4<br> 3<br> 1<br> 2<br> 3<br> 0</p><h4 id="sample-output-2" tabindex="-1"><a class="header-anchor" href="#sample-output-2" aria-hidden="true">#</a> Sample Output</h4><p>6<br> 0</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
题目要求实际上是冒泡排序。结果为冒泡排序最少操作次数，即逆序对个数。
&quot;&quot;&quot;</span>

<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">,</span> <span class="token number">0</span>
    mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    left_arr<span class="token punctuation">,</span> left_cnt <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
    right_arr<span class="token punctuation">,</span> right_cnt <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    combined_arr<span class="token punctuation">,</span> cross_cnt <span class="token operator">=</span> merge<span class="token punctuation">(</span>left_arr<span class="token punctuation">,</span> right_arr<span class="token punctuation">)</span>
    <span class="token keyword">return</span> combined_arr<span class="token punctuation">,</span> left_cnt <span class="token operator">+</span> right_cnt <span class="token operator">+</span> cross_cnt


<span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">,</span> right_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span>
    merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> left_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> right_arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right_arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>
            cnt <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">)</span> <span class="token operator">-</span> i
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
    merged <span class="token operator">+=</span> left_arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>
    merged <span class="token operator">+=</span> right_arr<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> merged<span class="token punctuation">,</span> cnt


arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">while</span> x <span class="token operator">:=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="排序算法总览" tabindex="-1"><a class="header-anchor" href="#排序算法总览" aria-hidden="true">#</a> 排序算法总览</h2><h3 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h3><p>选择排序是一种简单直观的排序算法。它的工作原理是每次找出第 i 小的元素（也就是 ￥A_{i..n}￥ 中最小的元素），然后将这个元素与数组第 i 个位置上的元素交换。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ith <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>ith<span class="token punctuation">]</span><span class="token punctuation">:</span>
                ith <span class="token operator">=</span> j
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>ith<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>ith<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h3><p>冒泡排序是一种简单的排序算法。由于在算法的执行过程中，较小的元素像是气泡般慢慢「浮」到数列的顶端，故叫做冒泡排序。</p><p>它的工作原理是每次检查相邻两个元素，如果前面的元素与后面的元素满足给定的排序条件，就将相邻两个元素交换。当没有相邻的元素需要交换时，排序就完成了。<br> 经过 i 次扫描后，数列的末尾 i 项必然是最大的 i 项，因此冒泡排序最多需要扫描 n-1 遍数组就能完成排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">while</span> flag<span class="token punctuation">:</span>
        flag <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                flag <span class="token operator">=</span> <span class="token boolean">True</span>
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h3><p>插入排序是一种简单直观的排序算法。它的工作原理为将待排列元素划分为「已排序」和「未排序」两部分，每次从「未排序的」元素中选择一个插入到「已排序的」元素中的正确位置。</p><p>一个与插入排序相同的操作是打扑克牌时，从牌桌上抓一张牌，按牌面大小插到手牌后，再抓下一张牌。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">:</span>
            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>
        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序" aria-hidden="true">#</a> 计数排序</h3><p>计数排序是一种线性时间的排序算法。<br> 计数排序的工作原理是使用一个额外的数组 C，其中第 i 个元素是待排序数组 A 中值等于 i 的元素的个数，然后根据数组 C 来将 A 中的元素排到正确的位置。</p><p>它的工作过程分为三个步骤：</p><ol><li>计算每个数出现了几次；求出每个数出现次数的 前缀和；</li><li>利用出现次数的前缀和，</li><li>从右至左计算每个数的排名。</li></ol><p>计算前缀和是因为直接将 C 中正数对应的元素依次放入 A 中不能解决元素重复的情形。</p><p>我们通过为额外数组 C 中的每一项计算前缀和，结合每一项的数值，就可以为重复元素确定一个唯一排名：</p><p>额外数组 C 中每一项的数值即是该 key 值下重复元素的个数，而该项的前缀和即是排在最后一个的重复元素的排名。</p><p>如果按照 A 的逆序进行排列，那么显然排序后的数组将保持 A 的原序（相同 key 值情况下），也即得到一种稳定的排序算法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>N <span class="token operator">=</span> W <span class="token operator">=</span> <span class="token number">100010</span>
n <span class="token operator">=</span> w <span class="token operator">=</span> <span class="token number">0</span>
a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> N
cnt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> W

<span class="token keyword">def</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        b<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h3><p>快速排序，又称分区交换排序，简称「快排」，是一种被广泛运用的排序算法。</p><p>快速排序的工作原理是通过 分治 的方式来将一个数组排序。</p><p>快速排序分为三个过程：</p><ol><li>将数列划分为两部分（要求保证相对大小关系）；</li><li>递归到两个子序列中分别进行快速排序；</li><li>不用合并，因为此时数列已经完全有序。</li></ol><p>和归并排序不同，第一步并不是直接分成前后两个序列，而是在分的过程中要保证相对大小关系。具体来说，第一步要是要把数列分成两个部分，然后保证前一个子数列中的数都小于后一个子数列中的数。为了保证平均时间复杂度，一般是随机选择一个数 m 来当做两个子数列的分界。</p><p>之后，维护一前一后两个指针 p 和 q，依次考虑当前的数是否放在了应该放的位置（前还是后）。如果当前的数没放对，比如说如果后面的指针 q 遇到了一个比 m 小的数，那么可以交换 p 和 q 位置上的数，再把 p 向后移一位。当前的数的位置全放对后，再移动指针继续处理，直到两个指针相遇。</p><p>其实，快速排序没有指定应如何具体实现第一步，不论是选择 m 的过程还是划分的过程，都有不止一种实现方法。</p><p>第三步中的序列已经分别有序且第一个序列中的数都小于第二个数，所以直接拼接起来就好了。</p>`,35),I=s("p",null,[n("当接近"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),n("情况时，可以考虑朴素优化、三路快速排序、内省排序等来优化。")],-1),T=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span> first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> first <span class="token operator">&gt;=</span> last<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    mid_value <span class="token operator">=</span> alist<span class="token punctuation">[</span>first<span class="token punctuation">]</span>
    low <span class="token operator">=</span> first
    high <span class="token operator">=</span> last
    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>
        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token keyword">and</span> alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> mid_value<span class="token punctuation">:</span>
            high <span class="token operator">-=</span> <span class="token number">1</span>
        alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span>
        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token keyword">and</span> alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid_value<span class="token punctuation">:</span>
            low <span class="token operator">+=</span> <span class="token number">1</span>
        alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span>
    alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> mid_value
    quick_sort<span class="token punctuation">(</span>alist<span class="token punctuation">,</span> first<span class="token punctuation">,</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    quick_sort<span class="token punctuation">(</span>alist<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> last<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序" aria-hidden="true">#</a> 归并排序</h3><p>归并排序是高效的基于比较的稳定排序算法。</p>`,3),D=s("p",null,[n("归并排序基于分治思想将数组分段排序后合并，时间复杂度在最优、最坏与平均情况下均为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Θ"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\Theta (n \\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"Θ"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[n("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n("，空间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Θ"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\Theta (n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"Θ"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n("。")],-1),W=s("p",null,[n("归并排序可以只使用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Θ"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\Theta (1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"Θ"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n(" 的辅助空间，但为便捷通常使用与原数组等长的辅助数组。")],-1),V=a(`<p>归并排序分为合并和分治两部分。</p><p>最核心的部分是合并（merge）过程：将两个有序的数组 left_arr[i] 和 right_arr[j] 合并为一个有序数组 combined_arr[k]。</p><p>从左往右枚举 left_arr[i] 和 right_arr[j]，找出最小的值并放入数组 combined_arr[k]；重复上述过程直到 left_arr[i] 和 right_arr[j] 有一个为空时，将另一个数组剩下的元素放入 combined_arr[k]。</p><p>为保证排序的稳定性，前段首元素小于或等于后段首元素时（left_arr[i] &lt;= right_arr[j]）而非小于时（left_arr[i] &lt; right_arr[j]）就要作为最小值放入 combined_arr[k]。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">,</span> <span class="token number">0</span>  <span class="token comment"># 递归边界，一个元素已经是有序的，同时逆序对个数为0。</span>
    mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    left_arr<span class="token punctuation">,</span> left_cnt <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 递归划分左部分</span>
    right_arr<span class="token punctuation">,</span> right_cnt <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 递归划分右部分</span>
    combined<span class="token punctuation">,</span> cross_cnt <span class="token operator">=</span> merge<span class="token punctuation">(</span>left_arr<span class="token punctuation">,</span> right_arr<span class="token punctuation">)</span>  <span class="token comment"># 归并左右两部分并计数逆序对</span>
    <span class="token keyword">return</span> combined<span class="token punctuation">,</span> left_cnt <span class="token operator">+</span> right_cnt <span class="token operator">+</span> cross_cnt  <span class="token comment"># 返回排序后的数组和逆序对总数</span>


<span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">,</span> right_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; 归并，并计算逆序对 &quot;&quot;&quot;</span>
    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    merged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> left_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> right_arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right_arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>
            count <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">)</span> <span class="token operator">-</span> i
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            merged<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
    merged <span class="token operator">+=</span> left_arr<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>
    merged <span class="token operator">+=</span> right_arr<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> merged<span class="token punctuation">,</span> count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序" aria-hidden="true">#</a> 基数排序*</h3><p>基数排序是一种非比较型的排序算法，最早用于解决卡片排序的问题。基数排序将待排序的元素拆分为 k 个关键字，逐一对各个关键字排序后完成对所有元素的排序。</p><p>如果是从第 1 关键字到第 k 关键字顺序进行比较，则该基数排序称为 MSD（Most Significant Digit first）基数排序；</p><p>如果是从第 k 关键字到第 1 关键字顺序进行比较，则该基数排序称为 LSD（Least Significant Digit first）基数排序。</p><h3 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序*</h3><p>堆排序是指利用 二叉堆 这种数据结构所设计的一种排序算法。堆排序的适用数据结构为数组。</p><p>堆排序的本质是建立在堆上的选择排序。</p><h3 id="桶排序" tabindex="-1"><a class="header-anchor" href="#桶排序" aria-hidden="true">#</a> 桶排序*</h3><p>桶排序是排序算法的一种，适用于待排序数据值域较大但分布比较均匀的情况。</p><p>桶排序按下列步骤进行：</p><ol><li>设置一个定量的数组当作空桶；</li><li>遍历序列，并将元素一个个放到对应的桶中；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把元素再放回原来的序列中。</li></ol><h3 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序" aria-hidden="true">#</a> 希尔排序*</h3><p>希尔排序，也称为缩小增量排序法，是 插入排序 的一种改进版本。希尔排序以它的发明者希尔）命名。</p><p>排序对不相邻的记录进行比较和移动：</p><ol><li>将待排序序列分为若干子序列（每个子序列的元素在原始数组中间距相同）；</li><li>对这些子序列进行插入排序；</li><li>减小每个子序列中元素之间的间距，重复上述过程直至间距减少为 1。</li></ol>`,20);function B(R,E){return p(),e("div",null,[i,l(" more "),c,r,u,m,d,k,h,g,b,v,y,w,x,_,f,M,j,O,q,L,A,z,N,S,C,I,T,D,W,V])}const G=t(o,[["render",B],["__file","0x05.html.vue"]]);export{G as default};
