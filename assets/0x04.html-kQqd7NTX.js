import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as p,b as t,f as e}from"./app-_Us5wM1p.js";const o={},i=t("p",null,"二分法的基础是在单调序列或单调函数中进行查找。",-1),c=e(`<p>当问题答案具有单调性时，可通过二分把求解过程转化为判定过程。同时可以扩展到三分法去解决单峰函数的极值问题等……</p><h2 id="二分模板" tabindex="-1"><a class="header-anchor" href="#二分模板" aria-hidden="true">#</a> 二分模板</h2><p>模板以单调递增序列为例</p><figure><img src="https://fastly.jsdelivr.net/gh/FoolAsphel/Avalon@main/img/BinarySearchInfo.png" alt="单调递增二分模板" tabindex="0" loading="lazy"><figcaption>单调递增二分模板</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
sorted_nums <span class="token operator">=</span> nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># nums 为单调递增序列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找最后一个-x-的数的下标-最大化查找" tabindex="-1"><a class="header-anchor" href="#查找最后一个-x-的数的下标-最大化查找" aria-hidden="true">#</a> 查找最后一个&lt;=x 的数的下标（最大化查找）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment"># 开区间</span>
    <span class="token keyword">while</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r<span class="token punctuation">:</span> <span class="token comment"># l + 1 == r 时结束循环 保证l、r可行域不重叠</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid
    <span class="token keyword">return</span> l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找第一个-x-的数的下标-最小化查找" tabindex="-1"><a class="header-anchor" href="#查找第一个-x-的数的下标-最小化查找" aria-hidden="true">#</a> 查找第一个&gt;=x 的数的下标（最小化查找）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment"># 开区间</span>
    <span class="token keyword">while</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r<span class="token punctuation">:</span> <span class="token comment"># l + 1 == r 时结束循环 保证l、r可行域不重叠</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid
    <span class="token keyword">return</span> r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整数二分" tabindex="-1"><a class="header-anchor" href="#整数二分" aria-hidden="true">#</a> 整数二分</h2><p>可以理解 l + 1 &lt; r 的 1 为整数间隔，保证每个数不重不漏。</p><h3 id="例题-洛谷-p2249-查找" tabindex="-1"><a class="header-anchor" href="#例题-洛谷-p2249-查找" aria-hidden="true">#</a> 例题 洛谷 P2249 查找</h3><h4 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h4><p>输入 n 个不超过 10^9 的单调不减的（就是后面的数字不小于前面的数字）非负整数 a1, a2, ……, an，然后进行 m 次询问。<br> 对于每次询问，给出一个整数 q，要求输出这个数字在序列中第一次出现的编号，如果没有找到的话输出 −1。</p><h4 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h4><p>第一行 2 个整数 n 和 m，表示数字个数和询问次数。<br> 第二行 n 个整数，表示这些待查询的数字。<br> 第三行 m 个整数，表示询问这些数字的编号，从 1 开始编号。</p><h4 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h4><p>输出一行，m 个整数，以空格隔开，表示答案。</p><h4 id="sample-input" tabindex="-1"><a class="header-anchor" href="#sample-input" aria-hidden="true">#</a> Sample Input</h4><p>11 3<br> 1 3 3 3 5 7 9 11 13 15 15<br> 1 3 6</p><h4 id="sample-output" tabindex="-1"><a class="header-anchor" href="#sample-output" aria-hidden="true">#</a> Sample Output</h4><p>1 2 -1</p><h4 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> Range</h4><p>$1\\le n \\le 10^6$,<br> $0\\le a_i$,<br> $q\\le 10^9$,<br> $1\\le m \\le 10^5$,</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">while</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid
        <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid

    <span class="token keyword">return</span> r <span class="token keyword">if</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>


n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
query <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>search<span class="token punctuation">(</span>query<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浮点数二分" tabindex="-1"><a class="header-anchor" href="#浮点数二分" aria-hidden="true">#</a> 浮点数二分</h2><p>将模板中的+1 间隔改为一个足够小的数字 eps，具体以题目要求为准,同时将判断条件改为符合题意的 check 函数。<br> 当无法确定精度或难以表示时，可以通过固定循环次数来查找。</p><h3 id="例题-p1024-一元三次方程求解" tabindex="-1"><a class="header-anchor" href="#例题-p1024-一元三次方程求解" aria-hidden="true">#</a> 例题 P1024 一元三次方程求解</h3><h4 id="description-1" tabindex="-1"><a class="header-anchor" href="#description-1" aria-hidden="true">#</a> Description</h4><p>有形如: $ax^{3}+b x^{2}+c x+d=0$ 这样的一个一元三次方程。给出该方程中各项的系数 (a, b, c, d 均为 实数），并约定该方程存在三个不同实根（根的范围在 -100 至 100 之间），且根与根之差的绝对值 $\\geq 1$ 。要求由小到大依次在同一行输出这三个实根(根与根之间留有空格), 并精确到小数点后 2 位。</p><p>提示：记方程 $f(x)=0$, 若存在 2 个数 $x_{1}$和 $x_{2}$, 且 $x_{1}&lt;x_{2}$, $f\\left(x*{1}\\right) \\times f\\left(x*{2}\\right)&lt;0$ , 则在 $\\left(x*{1}, x*{2}\\right)$ 之间一定有一个根。</p><h4 id="input-1" tabindex="-1"><a class="header-anchor" href="#input-1" aria-hidden="true">#</a> Input</h4><p>一行, 4 个实数 a, b, c, d 。</p><h4 id="output-1" tabindex="-1"><a class="header-anchor" href="#output-1" aria-hidden="true">#</a> Output</h4><p>一行, 3 个实根, 从小到大输出，并精确到小数点后 2 位。</p><h4 id="sample-input-1" tabindex="-1"><a class="header-anchor" href="#sample-input-1" aria-hidden="true">#</a> Sample Input</h4><p>1 -5 -4 20</p><h4 id="sample-output-1" tabindex="-1"><a class="header-anchor" href="#sample-output-1" aria-hidden="true">#</a> Sample Output</h4><p>-2.00 2.00 5.00</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> x <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> b <span class="token operator">*</span> x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> c <span class="token operator">*</span> x <span class="token operator">+</span> d


<span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> l <span class="token operator">+</span> <span class="token number">1e-5</span> <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> fun<span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">*</span> fun<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid
    <span class="token keyword">return</span> l

a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    y1<span class="token punctuation">,</span> y2 <span class="token operator">=</span> fun<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> fun<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> y1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token format-spec">0.2f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> y1 <span class="token operator">*</span> y2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>find<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">0.2f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="答案二分转换判定" tabindex="-1"><a class="header-anchor" href="#答案二分转换判定" aria-hidden="true">#</a> 答案二分转换判定</h2><p>当拥有判定算法时，可通过枚举解空间来求出答案。</p><p>当解空间具有单调性时，可以使用二分查找代替枚举。</p><p>通常为最优化问题，并且原问题无法直接求解，可以考虑转换为判定问题。</p><p>二分答案的结果通常为模拟过程：</p><ul><li>计数型</li><li>求和型</li><li>是否型</li></ul><p>并根据图像单调性确定二分方法。</p><p>二分答案的本质是建立一个定义域为解空间，值域为0/1的单调分段函数，在这个函数上通过二分查找分界点。</p><figure><img src="https://fastly.jsdelivr.net/gh/FoolAsphel/Avalon@main/img/BinaryAnswer.png" alt="答案二分" tabindex="0" loading="lazy"><figcaption>答案二分</figcaption></figure><h3 id="例题-洛谷-p2440-木材加工" tabindex="-1"><a class="header-anchor" href="#例题-洛谷-p2440-木材加工" aria-hidden="true">#</a> 例题 洛谷 P2440 木材加工</h3><h4 id="description-2" tabindex="-1"><a class="header-anchor" href="#description-2" aria-hidden="true">#</a> Description</h4><p>木材厂有 n 根原木, 现在想把这些木头切割成 k 段长度均为 l 的小段木头（木头有可能有剩余）。 当然, 我们希望得到的小段木头越长越好, 请求出 l 的最大值。<br> 木头长度的单位是 $\\mathrm{cm}$, 原木的长度都是正整数, 我们要求切割得到的小段木头的长度也是正整数。 例如有两根原木长度分别为 11 和 21 , 要求切割成等长的 6 段, 很明显能切割出来的小段木头长度最长为 5 。</p><h4 id="input-2" tabindex="-1"><a class="header-anchor" href="#input-2" aria-hidden="true">#</a> Input</h4><p>第一行是两个正整数 n, k , 分别表示原木的数量, 需要得到的小段的数量。<br> 接下来 n 行, 每行一个正整数 $L_{i}$, 表示一根原木的长度。</p><h4 id="output-2" tabindex="-1"><a class="header-anchor" href="#output-2" aria-hidden="true">#</a> Output</h4><p>仅一行, 即 l 的最大值。<br> 如果连 1 $\\mathrm{~cm}$ 长的小段都切不出来, 输出 0 。</p><h4 id="sample-input-2" tabindex="-1"><a class="header-anchor" href="#sample-input-2" aria-hidden="true">#</a> Sample Input</h4><p>3 7<br> 232<br> 124<br> 456</p><h4 id="sample-output-2" tabindex="-1"><a class="header-anchor" href="#sample-output-2" aria-hidden="true">#</a> Sample Output</h4><p>114</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
段数y时关于段长x的减函数
通常判定关系可以由提问直接得出，若给出条件无单调性，需寻找另外条件作为判定关系。
&quot;&quot;&quot;</span>

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> ans
    y <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        y <span class="token operator">+=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> x

    <span class="token keyword">if</span> y <span class="token operator">&gt;=</span> k<span class="token punctuation">:</span>
        ans <span class="token operator">=</span> x
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>


n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

ans <span class="token operator">=</span> <span class="token number">0</span>
l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">while</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">if</span> check<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> mid
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        r <span class="token operator">=</span> mid

<span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他例题" tabindex="-1"><a class="header-anchor" href="#其他例题" aria-hidden="true">#</a> 其他例题</h3><p>洛谷 P2678 跳石头</p><p>洛谷 P1314 聪明的质检员</p><p>洛谷 P1083 借教室</p><p>洛谷 P1902 刺杀大师</p><p>AcWing 102 最佳牛围栏</p><p>AcWing 103 特殊排序</p><h2 id="单峰函数三分极值" tabindex="-1"><a class="header-anchor" href="#单峰函数三分极值" aria-hidden="true">#</a> 单峰函数三分极值*</h2>`,69);function l(u,r){return s(),a("div",null,[i,p(" more "),c])}const m=n(o,[["render",l],["__file","0x04.html.vue"]]);export{m as default};
